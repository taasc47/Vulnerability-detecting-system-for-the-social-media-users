# -*- coding: utf-8 -*-
"""
Created on Thu Oct  7 19:59:26 2021

@author: THISUM PC
"""


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from sklearn.preprocessing import LabelEncoder 
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.tree import plot_tree
from sklearn.inspection import partial_dependence
from sklearn.tree import export_text

import pickle

#======================== Preprocessing the data =====================================#

data=pd.read_excel('new_book.xlsx',index_col=0, header=0)

test=pd.read_excel('Test data/test.xlsx',index_col=0, header=0)


data_n=data.drop(['Percentage'],axis='columns')

l=len(data_n.columns)
#print(data_n[data_n.isnull().any(axis=1)].values)
data_n=data_n.dropna()                             # drop the raws with null values

#print(data_n.columns)
var_columns=[c for c in data_n.columns if c not in ['Label']]
print('features: ',var_columns)


X=data_n.values[:,:l-1]
Y=data_n.values[:,l-1]

Y=Y.astype('str')


#========================= train Model ======================================#

X_train, X_test, y_train, y_test = train_test_split( X, Y, test_size = 0.3, random_state = 100)

Model1 = DecisionTreeClassifier(criterion = "entropy", random_state = 100,class_weight='balanced')

Model1.fit(X_train, y_train)

#========================= Save the model as pickle file ====================#

pickle_out = open("tree_model.pickle","wb")  # input data saving
pickle.dump(Model1, pickle_out)
pickle_out.close()

#====================== Predictions and accuracy check ======================#

y_pred1 = Model1.predict(X_test)
print ("Accuracy of Model1 is ", accuracy_score(y_test,y_pred1)*100)

y_pred = Model1.predict(test)
print('test results: ',y_pred)

#======= Exporting the tree model as text to find the new threshold values =======#

tree_rules = export_text(Model1, feature_names=list(var_columns))
print('')
print('------- New thresholds: -------')
print('')
print(tree_rules[:254])

#===================== creat the tree plot ===================================#

plt.figure(figsize=(20,10))

plot_tree(Model1,feature_names=var_columns,
          class_names=['High','Medium','Low'],
          rounded=True, filled=True)

# plt.savefig('Decision tree')
plt.show()




